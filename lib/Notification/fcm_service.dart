import 'package:finc/Notification/service_notifica.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:firebase_core/firebase_core.dart';

class FCMService {
  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;

  // Callbacks externos opcionais
  static Function(RemoteMessage)? onForegroundMessageCallback;
  static Function(RemoteMessage)? onOpenedAppCallback;

  /// Inicializa o FCM e notifica√ß√µes locais
  static Future<void> init() async {
    // Inicializa Firebase
    await Firebase.initializeApp();

    // Solicita permiss√µes (iOS e Android 13+)
    await _firebaseMessaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );

    // Inicializa notifica√ß√µes locais
    await LocalNotificationService.init();

    // Obt√©m token FCM ou gera novo
    await _getToken();

    // Atualiza token quando renovado
    FirebaseMessaging.instance.onTokenRefresh.listen((newToken) {
      print('üîë Token FCM atualizado: $newToken');
      // Enviar token para backend, se necess√°rio
    });

    // Listener para mensagens em foreground
    FirebaseMessaging.onMessage.listen(_onMessage);

    // Listener para quando app √© aberto a partir de notifica√ß√£o
    FirebaseMessaging.onMessageOpenedApp.listen(_onMessageOpenedApp);

    // Listener para mensagens em background
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  }

  /// Permite registrar callback externo para mensagens em foreground
  static void onForegroundMessage(Function(RemoteMessage) callback) {
    onForegroundMessageCallback = callback;
  }

  /// Permite registrar callback externo para app aberto via notifica√ß√£o
  static void onMessageOpenedApp(Function(RemoteMessage) callback) {
    onOpenedAppCallback = callback;
  }

  /// Obt√©m token FCM do dispositivo ou gera um novo se n√£o existir
  static Future<String?> _getToken() async {
    String? token = await _firebaseMessaging.getToken();

    if (token == null) {
      print('‚ö†Ô∏è Token FCM n√£o dispon√≠vel. Gerando novo token...');
      // For√ßa a gera√ß√£o de um novo token
      await _firebaseMessaging.deleteToken();
      token = await _firebaseMessaging.getToken();
    }

    print('üîë Token FCM do dispositivo: $token');
    // Aqui voc√™ pode enviar token para o backend, se necess√°rio
    return token;
  }

  /// Handler para mensagens recebidas em foreground
  static Future<void> _onMessage(RemoteMessage message) async {
    print('üì© Mensagem FCM recebida em foreground: ${message.notification?.title}');

    if (message.notification != null) {
      await LocalNotificationService.showNotification(
        id: DateTime.now().millisecondsSinceEpoch ~/ 1000,
        title: message.notification?.title ?? 'Nova notifica√ß√£o',
        body: message.notification?.body ?? '',
        payload: message.data['id'] ?? '',
      );
    }

    // Dispara callback externo, se existir
    if (onForegroundMessageCallback != null) {
      onForegroundMessageCallback!(message);
    }
  }

  /// Handler quando o app √© aberto via notifica√ß√£o
  static void _onMessageOpenedApp(RemoteMessage message) {
    print('üü¢ Notifica√ß√£o aberta: ${message.data}');

    // Dispara callback externo, se existir
    if (onOpenedAppCallback != null) {
      onOpenedAppCallback!(message);
    }
  }

  /// Handler de mensagens em background
  static Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
    await Firebase.initializeApp();
    await LocalNotificationService.init();

    print('üì® Mensagem FCM recebida em background: ${message.notification?.title}');

    if (message.notification != null) {
      await LocalNotificationService.showNotification(
        id: DateTime.now().millisecondsSinceEpoch ~/ 1000,
        title: message.notification?.title ?? 'Nova notifica√ß√£o',
        body: message.notification?.body ?? '',
        payload: message.data['id'] ?? '',
      );
    }
  }
}
