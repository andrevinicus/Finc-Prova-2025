import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:expense_repository/expense_repository.dart';
import 'package:expense_repository/src/n8n-analise-lancamento/n8n-analise-lancamento.dart';

class FirebaseAnaliseLancamentoRepository implements IAnaliseLancamentoRepository {
  final CollectionReference<Map<String, dynamic>> lancamentosCollection =
      FirebaseFirestore.instance.collection('n8n-analise-lan√ßamento');

  // -------------------------
  // Stream de lan√ßamentos do usu√°rio
  // -------------------------
  Stream<List<AnaliseLancamento>> streamLancamentos(String userId) {
    return lancamentosCollection
        .where('idApp', isEqualTo: userId) // <-- filtra pelo idApp do usu√°rio
        .orderBy('data', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => AnaliseLancamento.fromMap(doc.data(), doc.id))
            .toList());
  }

  // -------------------------
  // Consulta pontual
  // -------------------------
  @override
  Future<List<AnaliseLancamento>> getLancamentos(String userId) async {
    try {
      log('üîπ Buscando lan√ßamentos para userId: $userId');

      final snapshot = await lancamentosCollection
          .where('idApp', isEqualTo: userId)
          .orderBy('data', descending: true)
          .get();

      log('üîπ Documentos encontrados: ${snapshot.docs.length}');

      final lancamentos = snapshot.docs
          .map((doc) => AnaliseLancamento.fromMap(doc.data(), doc.id))
          .toList();

      log('‚úÖ ${lancamentos.length} lan√ßamentos carregados para o userId: $userId');
      return lancamentos;
    } catch (e, st) {
      log('‚ùå Erro ao buscar lan√ßamentos', error: e, stackTrace: st);
      rethrow;
    }
  }

  // -------------------------
  // Create / Update / Delete
  // -------------------------
  @override
  Future<void> createLancamento(AnaliseLancamento lancamento) async {
    try {
      await lancamentosCollection.doc(lancamento.id).set(lancamento.toMap());
      log('‚úÖ Lan√ßamento criado: ${lancamento.detalhes} (ID: ${lancamento.id})');
    } catch (e, st) {
      log('‚ùå Erro ao criar lan√ßamento', error: e, stackTrace: st);
      throw Exception('Erro ao criar lan√ßamento');
    }
  }

  @override
  Future<void> updateLancamento(AnaliseLancamento lancamento) async {
    try {
      await lancamentosCollection.doc(lancamento.id).update(lancamento.toMap());
      log('‚úÖ Lan√ßamento atualizado: ${lancamento.detalhes} (ID: ${lancamento.id})');
    } catch (e, st) {
      log('‚ùå Erro ao atualizar lan√ßamento', error: e, stackTrace: st);
      throw Exception('Erro ao atualizar lan√ßamento');
    }
  }

  @override
  Future<void> deleteLancamento(String lancamentoId) async {
    try {
      await lancamentosCollection.doc(lancamentoId).delete();
      log('‚úÖ Lan√ßamento deletado (ID: $lancamentoId)');
    } catch (e, st) {
      log('‚ùå Erro ao deletar lan√ßamento', error: e, stackTrace: st);
      throw Exception('Erro ao deletar lan√ßamento');
    }
  }

  // -------------------------
  // Checa pend√™ncias
  // -------------------------
  @override
  Future<bool> hasPendencias(String userId) async {
    try {
      final snapshot = await lancamentosCollection
          .where('idApp', isEqualTo: userId)
          .where('status', isEqualTo: 'pendente')
          .limit(1)
          .get();

      return snapshot.docs.isNotEmpty;
    } catch (e, st) {
      log('‚ùå Erro ao verificar pend√™ncias', error: e, stackTrace: st);
      throw Exception('Erro ao verificar pend√™ncias');
    }
  }
}
